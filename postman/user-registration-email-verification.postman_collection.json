{
	"info": {
		"_postman_id": "user-auth-collection",
		"name": "User Registration, Email Verification & Login/Logout",
		"description": "Complete collection for user authentication including registration, email verification, login, logout, and token refresh",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('user');",
							"    pm.expect(jsonData.data).to.have.property('accessToken');",
							"    pm.expect(jsonData.data).to.have.property('refreshToken');",
							"    pm.expect(jsonData).to.have.property('message');",
							"});",
							"",
							"pm.test(\"User object has correct fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    const user = jsonData.data.user;",
							"    pm.expect(user).to.have.property('id');",
							"    pm.expect(user).to.have.property('firstName');",
							"    pm.expect(user).to.have.property('lastName');",
							"    pm.expect(user).to.have.property('email');",
							"    pm.expect(user).to.have.property('isEmailVerified');",
							"    pm.expect(user).to.have.property('createdAt');",
							"    pm.expect(user).to.have.property('updatedAt');",
							"});",
							"",
							"pm.test(\"Tokens are properly formatted\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.accessToken).to.be.a('string');",
							"    pm.expect(jsonData.data.refreshToken).to.be.a('string');",
							"    pm.expect(jsonData.data.accessToken.length).to.be.greaterThan(0);",
							"    pm.expect(jsonData.data.refreshToken.length).to.be.greaterThan(0);",
							"});",
							"",
							"// Store tokens for other requests",
							"if (pm.response.code === 200) {",
							"    const jsonData = pm.response.json();",
							"    pm.environment.set('accessToken', jsonData.data.accessToken);",
							"    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				},
				"description": "Login user with email and password. Returns user data, access token, and refresh token."
			},
			"response": []
		},
		{
			"name": "User Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.equal('Logout successful');",
							"});",
							"",
							"pm.test(\"Data object is empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData.data)).to.have.lengthOf(0);",
							"});",
							"",
							"// Clear tokens after successful logout",
							"if (pm.response.code === 200) {",
							"    pm.environment.unset('accessToken');",
							"    pm.environment.unset('refreshToken');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"logout"
					]
				},
				"description": "Logout user by invalidating the refresh token. Requires access token in Authorization header."
			},
			"response": []
		},
		{
			"name": "Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('accessToken');",
							"    pm.expect(jsonData.data).to.have.property('refreshToken');",
							"});",
							"",
							"pm.test(\"New tokens are properly formatted\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.accessToken).to.be.a('string');",
							"    pm.expect(jsonData.data.refreshToken).to.be.a('string');",
							"    pm.expect(jsonData.data.accessToken.length).to.be.greaterThan(0);",
							"    pm.expect(jsonData.data.refreshToken.length).to.be.greaterThan(0);",
							"});",
							"",
							"// Update stored tokens",
							"if (pm.response.code === 200) {",
							"    const jsonData = pm.response.json();",
							"    pm.environment.set('accessToken', jsonData.data.accessToken);",
							"    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/refresh-token",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"refresh-token"
					]
				},
				"description": "Refresh access token using refresh token. Returns new access token and refresh token."
			},
			"response": []
		},
		{
			"name": "Login Error - Invalid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has error structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('code');",
							"});",
							"",
							"pm.test(\"Error message and code are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('Invalid email or password');",
							"    pm.expect(jsonData.code).to.equal('INVALID_CREDENTIALS');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"wrongpassword\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				},
				"description": "Test login with invalid credentials to verify error handling."
			},
			"response": []
		},
		{
			"name": "Logout Error - Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has error structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('code');",
							"});",
							"",
							"pm.test(\"Error message and code are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('Invalid or expired token');",
							"    pm.expect(jsonData.code).to.equal('INVALID_TOKEN');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer invalid_token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refreshToken\": \"invalid_refresh_token\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"logout"
					]
				},
				"description": "Test logout with invalid token to verify error handling."
			},
			"response": []
		},
		{
			"name": "Refresh Token Error - Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has error structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('code');",
							"});",
							"",
							"pm.test(\"Error message and code are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('Invalid or expired refresh token');",
							"    pm.expect(jsonData.code).to.equal('INVALID_REFRESH_TOKEN');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refreshToken\": \"invalid_refresh_token\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/auth/refresh-token",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"refresh-token"
					]
				},
				"description": "Test refresh token with invalid token to verify error handling."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}
